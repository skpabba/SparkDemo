/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.spark.common;  
@SuppressWarnings("all")
/** Set Top Box Event */
@org.apache.avro.specific.AvroGenerated
public class STBEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"STBEvent\",\"namespace\":\"com.cloudera.spark.common\",\"doc\":\"Set Top Box Event\",\"fields\":[{\"name\":\"subscriber_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"event_dt\",\"type\":[\"null\",\"long\"]},{\"name\":\"event_type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"event_data\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  @Deprecated public java.lang.String subscriber_id;
  @Deprecated public java.lang.Long event_dt;
  @Deprecated public java.lang.String event_type;
  @Deprecated public java.lang.String event_data;

  /**
   * Default constructor.
   */
  public STBEvent() {}

  /**
   * All-args constructor.
   */
  public STBEvent(java.lang.String subscriber_id, java.lang.Long event_dt, java.lang.String event_type, java.lang.String event_data) {
    this.subscriber_id = subscriber_id;
    this.event_dt = event_dt;
    this.event_type = event_type;
    this.event_data = event_data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return subscriber_id;
    case 1: return event_dt;
    case 2: return event_type;
    case 3: return event_data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: subscriber_id = (java.lang.String)value$; break;
    case 1: event_dt = (java.lang.Long)value$; break;
    case 2: event_type = (java.lang.String)value$; break;
    case 3: event_data = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'subscriber_id' field.
   */
  public java.lang.String getSubscriberId() {
    return subscriber_id;
  }

  /**
   * Sets the value of the 'subscriber_id' field.
   * @param value the value to set.
   */
  public void setSubscriberId(java.lang.String value) {
    this.subscriber_id = value;
  }

  /**
   * Gets the value of the 'event_dt' field.
   */
  public java.lang.Long getEventDt() {
    return event_dt;
  }

  /**
   * Sets the value of the 'event_dt' field.
   * @param value the value to set.
   */
  public void setEventDt(java.lang.Long value) {
    this.event_dt = value;
  }

  /**
   * Gets the value of the 'event_type' field.
   */
  public java.lang.String getEventType() {
    return event_type;
  }

  /**
   * Sets the value of the 'event_type' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.event_type = value;
  }

  /**
   * Gets the value of the 'event_data' field.
   */
  public java.lang.String getEventData() {
    return event_data;
  }

  /**
   * Sets the value of the 'event_data' field.
   * @param value the value to set.
   */
  public void setEventData(java.lang.String value) {
    this.event_data = value;
  }

  /** Creates a new STBEvent RecordBuilder */
  public static com.cloudera.spark.common.STBEvent.Builder newBuilder() {
    return new com.cloudera.spark.common.STBEvent.Builder();
  }
  
  /** Creates a new STBEvent RecordBuilder by copying an existing Builder */
  public static com.cloudera.spark.common.STBEvent.Builder newBuilder(com.cloudera.spark.common.STBEvent.Builder other) {
    return new com.cloudera.spark.common.STBEvent.Builder(other);
  }
  
  /** Creates a new STBEvent RecordBuilder by copying an existing STBEvent instance */
  public static com.cloudera.spark.common.STBEvent.Builder newBuilder(com.cloudera.spark.common.STBEvent other) {
    return new com.cloudera.spark.common.STBEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for STBEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<STBEvent>
    implements org.apache.avro.data.RecordBuilder<STBEvent> {

    private java.lang.String subscriber_id;
    private java.lang.Long event_dt;
    private java.lang.String event_type;
    private java.lang.String event_data;

    /** Creates a new Builder */
    private Builder() {
      super(com.cloudera.spark.common.STBEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cloudera.spark.common.STBEvent.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing STBEvent instance */
    private Builder(com.cloudera.spark.common.STBEvent other) {
            super(com.cloudera.spark.common.STBEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.subscriber_id)) {
        this.subscriber_id = data().deepCopy(fields()[0].schema(), other.subscriber_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_dt)) {
        this.event_dt = data().deepCopy(fields()[1].schema(), other.event_dt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event_type)) {
        this.event_type = data().deepCopy(fields()[2].schema(), other.event_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event_data)) {
        this.event_data = data().deepCopy(fields()[3].schema(), other.event_data);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'subscriber_id' field */
    public java.lang.String getSubscriberId() {
      return subscriber_id;
    }
    
    /** Sets the value of the 'subscriber_id' field */
    public com.cloudera.spark.common.STBEvent.Builder setSubscriberId(java.lang.String value) {
      validate(fields()[0], value);
      this.subscriber_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'subscriber_id' field has been set */
    public boolean hasSubscriberId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'subscriber_id' field */
    public com.cloudera.spark.common.STBEvent.Builder clearSubscriberId() {
      subscriber_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'event_dt' field */
    public java.lang.Long getEventDt() {
      return event_dt;
    }
    
    /** Sets the value of the 'event_dt' field */
    public com.cloudera.spark.common.STBEvent.Builder setEventDt(java.lang.Long value) {
      validate(fields()[1], value);
      this.event_dt = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'event_dt' field has been set */
    public boolean hasEventDt() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'event_dt' field */
    public com.cloudera.spark.common.STBEvent.Builder clearEventDt() {
      event_dt = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'event_type' field */
    public java.lang.String getEventType() {
      return event_type;
    }
    
    /** Sets the value of the 'event_type' field */
    public com.cloudera.spark.common.STBEvent.Builder setEventType(java.lang.String value) {
      validate(fields()[2], value);
      this.event_type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'event_type' field has been set */
    public boolean hasEventType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'event_type' field */
    public com.cloudera.spark.common.STBEvent.Builder clearEventType() {
      event_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'event_data' field */
    public java.lang.String getEventData() {
      return event_data;
    }
    
    /** Sets the value of the 'event_data' field */
    public com.cloudera.spark.common.STBEvent.Builder setEventData(java.lang.String value) {
      validate(fields()[3], value);
      this.event_data = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'event_data' field has been set */
    public boolean hasEventData() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'event_data' field */
    public com.cloudera.spark.common.STBEvent.Builder clearEventData() {
      event_data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public STBEvent build() {
      try {
        STBEvent record = new STBEvent();
        record.subscriber_id = fieldSetFlags()[0] ? this.subscriber_id : (java.lang.String) defaultValue(fields()[0]);
        record.event_dt = fieldSetFlags()[1] ? this.event_dt : (java.lang.Long) defaultValue(fields()[1]);
        record.event_type = fieldSetFlags()[2] ? this.event_type : (java.lang.String) defaultValue(fields()[2]);
        record.event_data = fieldSetFlags()[3] ? this.event_data : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
